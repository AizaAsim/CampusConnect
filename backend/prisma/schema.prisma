// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  username  String   @unique
  password  String
  fullName  String
  role      Role     @default(STUDENT)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  posts           Post[]
  comments        Comment[]
  ownedClubs      Club[]          @relation("ClubAdmin")
  clubMemberships ClubMember[]
  organizedEvents Event[]         @relation("EventOrganizer")
  eventAttendees  EventAttendee[]
}

enum Role {
  STUDENT
  CLUB_ADMIN
  ADMIN
}

model Post {
  id        Int       @id @default(autoincrement())
  title     String
  content   String
  authorId  Int
  author    User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  comments  Comment[]
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  postId    Int
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  authorId  Int
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Club {
  id          Int      @id @default(autoincrement())
  name        String
  description String
  category    String?
  meetingTime String?
  adminId     Int
  admin       User     @relation("ClubAdmin", fields: [adminId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  members ClubMember[]
  events  Event[]
}

model ClubMember {
  id        Int      @id @default(autoincrement())
  clubId    Int
  club      Club     @relation(fields: [clubId], references: [id], onDelete: Cascade)
  userId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  isAdmin   Boolean  @default(false)
  joinedAt  DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([clubId, userId])
}

model Event {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  dateTime    DateTime
  location    String
  organizerId Int
  organizer   User     @relation("EventOrganizer", fields: [organizerId], references: [id], onDelete: Cascade)
  clubId      Int?
  club        Club?    @relation(fields: [clubId], references: [id], onDelete: SetNull)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  attendees EventAttendee[]
}

model EventAttendee {
  id        Int      @id @default(autoincrement())
  eventId   Int
  event     Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  userId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  status    Status   @default(INTERESTED)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([eventId, userId])
}

enum Status {
  GOING
  INTERESTED
  NOT_GOING
}
